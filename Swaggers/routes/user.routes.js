const express = require("express")
const {UserModel} = require("../model/user.model")
const userRouter= express.Router()

/**
 * @swagger
 * components:
 *  schemas:
 *    User:
 *      type: object
 *      properties:
 *        _id:
 *          type: string
 *          description: This is a unique id generated by mongo
 *        username:
 *          type: string
 *          description: The username of user
 *        email:
 *          type: string
 *          description: The email of user
 *        password:
 *         type: string
 *         description: The password of user
 */



/**
 * @swagger
 * /users:
 *    get:
 *      summary: Get all users
 *      tags: [Users]
 *      responses:
 *       200:
 *         description: A list of users is returned
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 *       400:
 *         description: Some Error occured
 */


userRouter.get("/",async(req,res)=>{ 
    try {
    const  users=await UserModel.find()
    res.status(200).send({"msg":"All users data received",users})
   } 
   catch (error) {
     res.status(400).send({"error":error})
   }
})


/**
 * @swagger
 * /users:
 *    post:
 *      summary: For adding new users
 *      tags: [Users]
 *      requestBody:
 *                required: true
 *                content:
 *                  application/json:
 *                    schema:
 *                      $ref: '#/components/schemas/User'
 *      responses:
 *       200:
 *         description: A new user has been added
 *         content:
 *           application/json:
 *             schema:
 *               items:
 *                 $ref: '#/components/schemas/User'
 *       400:
 *         description: Some Error occured
 */

userRouter.post("/",async(req,res)=>{
   try {
      const user= new UserModel(req.body)
      await user.save();
      res.send({"msg":"New user has been added"})
   } 
   catch (error) {
      res.send({"error":error})
      
   }
})


/**
 * @swagger
 * /users/{id}:
 *    patch:
 *      summary: For updating the user
 *      tags: [Users]
 *      parameters:
 *       - in: path
 *         name: id
 *         schema:
 *            type: string
 *         required: true
 *         description: The user id
 *      requestBody:
 *                required: true
 *                content:
 *                  application/json:
 *                    schema:
 *                      $ref: '#/components/schemas/User'
 *      responses:
 *       200:
 *         description: A user has been updated
 *         content:
 *           application/json:
 *             schema:
 *               items:
 *                 $ref: '#/components/schemas/User'
 *       400:
 *         description: Some Error occured
 */


userRouter.patch("/:userID",async(req,res)=>{ 
    const {userID} = req.params

    try {
      await UserModel.findByIdAndUpdate({_id:userID}, req.body)
      res.status(200).send({"msg":"the users is Updated"})
   } 
   catch (error) {
     res.status(400).send({"error":error})
   }
})


/**
 * @swagger
 * /users/{id}:
 *    delete:
 *      summary: For deleting the user
 *      tags: [Users]
 *      parameters:
 *       - in: path
 *         name: id
 *         schema:
 *            type: string
 *         required: true
 *         description: The user id
 * 
 *      responses:
 *       200:
 *         description: A user has been updated
 *       400:
 *         description: Some Error occured
 */

userRouter.delete("/:userID",async(req,res)=>{ 
    const {userID} = req.params

    try {
      await UserModel.findByIdAndDelete({_id:userID}, req.body)
      res.status(200).send({"msg":"the users is Deleted"})
   } 
   catch (error) {
     res.status(400).send({"error":error})
   }
})



module.exports={
    userRouter
}